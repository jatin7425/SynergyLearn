
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // User Profiles: users can read their own, admin can read all
    match /userProfiles/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || request.auth.uid == 'Mcjp0wyJVcal3ocfav9aMOHzNzV2');
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      // No delete for user profiles generally
    }

    // User-specific data
    match /users/{userId}/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Study Rooms: Authenticated users can read all, create new ones.
    // Only creator (or future admin role) can update/delete.
    match /studyRooms/{roomId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.createdBy == request.auth.uid;
      // Member list updates are tricky. For now, allow any authenticated user to update (e.g., to join/leave)
      // A more robust rule would check if the user adding/removing themselves is the request.auth.uid
      allow update: if request.auth != null; 
      // allow update: if request.auth != null && (resource.data.createdBy == request.auth.uid || request.auth.uid in resource.data.members); // Example more restrictive update
      allow delete: if request.auth != null && resource.data.createdBy == request.auth.uid; // Only creator can delete

      // Messages within a study room
      match /messages/{messageId} {
        allow read: if request.auth != null && exists(/databases/$(database)/documents/studyRooms/$(roomId)); // User must be able to read room to read messages
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid && exists(/databases/$(database)/documents/studyRooms/$(roomId));
        allow update: if request.auth != null && resource.data.userId == request.auth.uid; // User can edit their own messages
        allow delete: if request.auth != null && resource.data.userId == request.auth.uid; // User can delete their own messages
      }
    }

    // Shared Note Links: Authenticated users can read. Only owner of the note can create/delete links.
    match /sharedNoteLinks/{linkId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.ownerUid == request.auth.uid;
      allow delete: if request.auth != null && resource.data.ownerUid == request.auth.uid;
    }

    // Admin Configuration: Only a specific admin UID can read/write.
    match /adminConfig/{configDocId} {
      allow read, write: if request.auth != null && request.auth.uid == 'Mcjp0wyJVcal3ocfav9aMOHzNzV2';
    }

    // Audit Logs: Only admin can read/write.
    match /auditLogs/{logId} {
      allow read, create: if request.auth != null && request.auth.uid == 'Mcjp0wyJVcal3ocfav9aMOHzNzV2';
      // Generally, audit logs should not be updated or deleted by admin through client.
      allow update, delete: if false; 
    }

    // System Agents (like AI Helper Profile)
    // Typically read by all authenticated users, write restricted to admin/deploy script.
    match /systemAgents/{agentId} {
      allow read: if request.auth != null;
      // For "ensureAIHelperProfileExists" from settings page (run by admin)
      allow write: if request.auth != null && request.auth.uid == 'Mcjp0wyJVcal3ocfav9aMOHzNzV2';
    }
  }
}
