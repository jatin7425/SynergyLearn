
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // User-specific data (notes, milestones, studyCollections, profile data, schedule, time tracking)
    // This is a general rule, more specific rules for subcollections like notes are below.
    match /users/{userId}/{subcollection}/{docId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // User's main profile document (e.g., users/{userId}/profile/main for learningGoal)
    match /users/{userId}/profile/main {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
     // User's gamification profile
    match /users/{userId}/profile/gamification {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // User Notes
    match /users/{ownerId}/notes/{noteId} {
      // Owner can do anything
      allow create, delete, write: if request.auth != null && request.auth.uid == ownerId;
      // Allow read if owner OR if the note is shared with the requesting user with 'read' permission
      allow read: if request.auth != null && (
                    request.auth.uid == ownerId || 
                    (resource.data.sharedWith[request.auth.uid] == 'read')
                  );
    }

    // Study Rooms
    match /studyRooms/{roomId} {
      allow read: if request.auth != null;
      
      allow create: if request.auth != null 
                      && request.resource.data.createdBy == request.auth.uid
                      && request.resource.data.name is string && request.resource.data.name.size() <= 99
                      && request.resource.data.topic is string && request.resource.data.topic.size() <= 199
                      && request.resource.data.memberCount == 1
                      && request.resource.data.members[0].uid == request.auth.uid;

      // Allow update if user is authenticated. Specific field updates are handled by client logic + potentially more granular rules if needed.
      // For now, allow general update by authenticated users for joining/leaving (members array), whiteboard, and memberCount.
      // Creator can update anything. Others can update specific fields.
      allow update: if request.auth != null && (
                      (resource.data.createdBy == request.auth.uid) || // Creator can update anything
                      (
                        request.resource.data.diff(resource.data).affectedKeys().hasAny(['members', 'memberCount', 'whiteboardDrawing', 'updatedAt']) &&
                        // Optional: add a rule that members being added/removed are valid UIDs or that memberCount reflects members array size.
                        // For whiteboardDrawing, ensure it's an array.
                        (request.resource.data.whiteboardDrawing is list || !request.resource.data.keys().hasAny(['whiteboardDrawing'])) &&
                        // Ensure other critical fields like createdBy are not changed by non-creators
                        request.resource.data.createdBy == resource.data.createdBy &&
                        request.resource.data.name == resource.data.name &&
                        request.resource.data.topic == resource.data.topic
                      )
                    );
                    
      allow delete: if request.auth != null && resource.data.createdBy == request.auth.uid;
    }

    // Study Room Messages
    match /studyRooms/{roomId}/messages/{messageId} {
      allow read: if request.auth != null && exists(/databases/$(database)/documents/studyRooms/$(roomId));

      allow create: if request.auth != null && (
                        // Case 1: User is creating their own message
                        (request.resource.data.userId == request.auth.uid && request.resource.data.userName != 'AI Helper') ||
                        // Case 2: Server/AI is creating a message (no request.auth) - allow if userId indicates AI
                        (request.resource.data.userId == 'AI_ASSISTANT' && request.resource.data.userName == 'AI Helper')
                      )
                      && exists(/databases/$(database)/documents/studyRooms/$(roomId));
										
      // Update if user owns the message (and it's not an AI message)
      // OR if the message being updated IS an AI message (identified by its userId)
      allow update: if request.auth != null && (
                        (resource.data.userId == request.auth.uid && resource.data.userId != 'AI_ASSISTANT') ||
                        (resource.data.userId == 'AI_ASSISTANT' && request.resource.data.userId == 'AI_ASSISTANT' && request.resource.data.userName == 'AI Helper')
                      );

      // Delete if user owns the message (and it's not an AI message)
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid && resource.data.userId != 'AI_ASSISTANT';
    }

    // User Profiles - public read for search, owner create/write for their own profile
    match /userProfiles/{profileUserId} {
      allow read: if request.auth != null; // Allow any authenticated user to read profiles (for searching)
      
      // Allow user to create their own profile document
      // Ensure the document ID matches their auth UID and the data being written also reflects this.
      allow create: if request.auth != null && request.auth.uid == profileUserId
                      && request.resource.data.uid == request.auth.uid
                      && request.resource.data.email == request.auth.token.email; // Ensure email in doc matches auth token
                      
      // Allow user to update their own profile, but only specific fields
      allow update: if request.auth != null && request.auth.uid == profileUserId
                      // Ensure critical identifiers are not changed
                      && request.resource.data.uid == resource.data.uid 
                      && request.resource.data.email == resource.data.email
                      // Allow only specific fields to be updated by the user
                      && request.resource.data.keys().hasOnly(['displayName', 'photoURL', 'updatedAt', 'uid', 'email', 'createdAt']); 
    }

    // System Agents (e.g., AI Helper Profile)
    match /systemAgents/{agentId} {
      allow read: if request.auth != null; // Authenticated users can read (e.g. to get AI avatar/name)
      // Allow write only if it's a specific admin action for the main AI profile
      // This is a simple check; for true admin roles, use custom claims.
      // Here, we assume an authenticated user (e.g., from settings page) can "ensure" the profile.
      allow write: if request.auth != null && agentId == 'AI_ASSISTANT_MAIN'; 
    }
  }
}
