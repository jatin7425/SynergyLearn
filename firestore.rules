
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // User-specific data (notes, milestones, studyCollections, profile data, schedule, time tracking)
    match /users/{userId}/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Study Rooms - Simple ownership-based rules
    match /studyRooms/{roomId} {
      // Anyone authenticated can read rooms
      allow read: if request.auth != null;

      // Only allow creation if the current user sets their UID as createdBy
      allow create: if request.auth != null && request.resource.data.createdBy == request.auth.uid;

      // Only the original creator can update or delete
      allow update, delete: if request.auth != null && resource.data.createdBy == request.auth.uid;
    }

    // Study Room Messages
    match /studyRooms/{roomId}/messages/{messageId} {
      // Read if authenticated and room exists
      allow read: if request.auth != null && exists(/databases/$(database)/documents/studyRooms/$(roomId));

      // Create messages rule
      allow create: if request.auth != null &&
                      // Common structural checks for all messages
                      request.resource.data.userName is string &&
                      request.resource.data.text is string &&
                      request.resource.data.text.size() > 0 && request.resource.data.text.size() < 1000 &&
                      request.resource.data.containsKey('timestamp') &&
                      exists(/databases/$(database)/documents/studyRooms/$(roomId)) &&
                      request.resource.data.keys().hasOnly(['userId', 'userName', 'userAvatar', 'text', 'timestamp']) &&
                      // Permission logic:
                      (
                        // Case 1: User is creating their own message
                        (request.resource.data.userId == request.auth.uid) ||
                        // Case 2: Authenticated user is creating a message on behalf of the AI
                        (request.resource.data.userId == 'AI_ASSISTANT' && request.resource.data.userName == 'AI Helper')
                      );

      // Update if user owns the message (users typically don't edit chat messages, but rule is here)
      allow update: if request.auth != null && resource.data.userId == request.auth.uid &&
                     request.resource.data.text is string && request.resource.data.text.size() > 0 && request.resource.data.text.size() < 1000 &&
                     request.resource.data.keys().hasOnly(['userId', 'userName', 'userAvatar', 'text', 'timestamp', 'updatedAt']) &&
                     request.resource.data.userId == resource.data.userId &&
                     request.resource.data.userName == resource.data.userName;

      // Delete if user owns the message
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
  }
}
