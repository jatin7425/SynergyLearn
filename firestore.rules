rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // User Profile Data (e.g., userProfiles/{userId}, users/{userId}/profile/main)
    match /users/{userId}/profile/{profileDocId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // User Notes - Specific rules for notes
    match /users/{userId}/notes/{noteId} {
      // Any authenticated user can read a note if they have the path (e.g., via a share link)
      allow read: if request.auth != null;
      // Only the owner can write or delete
      allow write, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Other user-specific collections (milestones, studyCollections, schedule, time tracking)
    match /users/{userId}/{collectionId}/{docId} 
      if collectionId != 'notes' && collectionId != 'profile' {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // UserProfiles collection (for searching users by email)
    match /userProfiles/{profileUserId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && request.auth.uid == profileUserId && request.resource.data.uid == request.auth.uid;
        allow update: if request.auth != null && request.auth.uid == profileUserId
                        && !(request.resource.data.diff(resource.data).affectedKeys().hasAny(['uid', 'email', 'createdAt'])); 
    }

    // Shared Note Links
    match /sharedNoteLinks/{linkId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.ownerUid == request.auth.uid;
      allow delete: if request.auth != null && resource.data.ownerUid == request.auth.uid;
      allow update: if false; 
    }

    // System Agents (e.g., AI Helper profile)
    match /systemAgents/{agentId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && agentId == 'AI_ASSISTANT_MAIN';
    }

    // Study Rooms
    match /studyRooms/{roomId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.createdBy == request.auth.uid;
      allow update: if request.auth != null && 
                      (
                        resource.data.createdBy == request.auth.uid || 
                        (
                          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members', 'memberCount', 'updatedAt'])) ||
                          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['whiteboardDrawing', 'updatedAt'])) ||
                          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members', 'memberCount', 'whiteboardDrawing', 'updatedAt']))
                        )
                      );
      allow delete: if request.auth != null && resource.data.createdBy == request.auth.uid;
    }

    // Study Room Messages
    match /studyRooms/{roomId}/messages/{messageId} {
      allow read: if request.auth != null && exists(/databases/$(database)/documents/studyRooms/$(roomId));
      allow create: if
                      (request.auth != null && request.resource.data.userId == request.auth.uid && request.resource.data.userName != 'AI Helper') ||
                      (request.resource.data.userId == 'AI_ASSISTANT' && request.resource.data.userName == 'AI Helper'); 
      allow update: if
                      (request.auth != null && resource.data.userId == request.auth.uid && request.resource.data.userId == request.auth.uid && request.resource.data.userName != 'AI Helper') ||
                      (resource.data.userId == 'AI_ASSISTANT' && request.resource.data.userId == 'AI_ASSISTANT' && 
                       resource.data.userName == 'AI Helper' && request.resource.data.userName == 'AI Helper');
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid && resource.data.userName != 'AI Helper';
    }
  }
}
