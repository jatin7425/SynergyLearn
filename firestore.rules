
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    // For prototype, hardcoding the admin UID. In production, use custom claims.
    function isAdmin(userId) {
      return userId == 'Mcjp0wyJVcal3ocfav9aMOHzNzV2'; // Replace with your actual admin UID
    }

    // User specific data (notes, milestones, etc.)
    match /users/{userId}/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // User profiles (created during sign-up)
    match /userProfiles/{profileUserId} {
      // Allow user to read/write their own profile
      // Allow admin to read any user profile
      allow read: if request.auth != null && (request.auth.uid == profileUserId || isAdmin(request.auth.uid));
      allow write: if request.auth != null && request.auth.uid == profileUserId; // Only user can write their own profile
    }
    
    // Study Rooms
    match /studyRooms/{roomId} {
      allow read: if request.auth != null; // Any authenticated user can read room details (e.g., to list them)
      allow create: if request.auth != null && request.resource.data.createdBy == request.auth.uid; // User can create if they are the creator
      allow update: if request.auth != null && 
                      (request.resource.data.createdBy == request.auth.uid || // Creator can update
                       request.resource.data.members.hasAny([request.auth.uid])); // Or members can update (e.g. drawing on whiteboard, adding themselves to members list)
                                                                                // More granular control might be needed for specific fields (e.g. only creator can change name/topic)
    }

    match /studyRooms/{roomId}/messages/{messageId} {
      allow read: if request.auth != null; // Any authenticated user in the room context (implicitly) can read messages
      allow create: if request.auth != null && 
                      (request.resource.data.userId == request.auth.uid || request.resource.data.userId == 'AI_ASSISTANT'); // User can create their own messages, or AI can
      allow update: if request.auth != null && request.resource.data.userId == request.auth.uid; // Only message owner can edit
      allow delete: if request.auth != null && request.resource.data.userId == request.auth.uid; // Only message owner can delete
    }

    // Shared Note Links - public read for link ID, only owner creates/deletes
    match /sharedNoteLinks/{linkId} {
      allow read: if true; // Anyone with the linkId can read it to get noteId and ownerUid
      allow create: if request.auth != null && request.resource.data.ownerUid == request.auth.uid;
      allow delete: if request.auth != null && resource.data.ownerUid == request.auth.uid; 
      // No update needed for links, they are static references
    }
    
    // Admin Configuration
    match /adminConfig/{configDocId} {
      allow read: if request.auth != null; // Any authenticated user can read (e.g., flows reading model ID)
      allow write: if request.auth != null && isAdmin(request.auth.uid); // Only admin can write
    }

     // System Agents (like AI Helper profile)
    match /systemAgents/{agentId} {
      allow read: if true; // Publicly readable (e.g., by study room to get AI helper details)
      allow write: if request.auth != null && isAdmin(request.auth.uid); // Only admin can write/update these profiles
    }
  }
}
