rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // User-specific data
    match /users/{userId}/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Specific rule for user's main profile document if needed for public read (e.g. display name)
    match /users/{userId}/profile/main {
      allow read: if request.auth != null; // Or make it public if needed: allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // User Profiles collection (for searching/displaying user info if needed in other features)
    match /userProfiles/{profileUserId} {
      allow read: if request.auth != null; // Allow authenticated users to read profiles (e.g., for search)
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid && request.resource.data.uid == profileUserId;
      allow update: if request.auth != null && request.auth.uid == profileUserId &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'photoURL', 'updatedAt']);
    }

    // System Agents (e.g., AI Helper profile)
    match /systemAgents/{agentId} {
      allow read: if request.auth != null; // Allow authenticated users to read AI profile
      allow write: if request.auth != null && agentId == 'AI_ASSISTANT_MAIN'; // Allow admin-like write from settings
    }

    // Study Rooms
    match /studyRooms/{roomId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.createdBy == request.auth.uid;
      
      // Allow creator full update, others can update specific fields (members, memberCount, whiteboardDrawing)
      allow update: if request.auth != null && (
                      (resource.data.createdBy == request.auth.uid) ||
                      (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members', 'memberCount', 'whiteboardDrawing', 'updatedAt']))
                    );
      allow delete: if request.auth != null && resource.data.createdBy == request.auth.uid;
    }

    // Study Room Messages
    match /studyRooms/{roomId}/messages/{messageId} {
      allow read: if request.auth != null && exists(/databases/$(database)/documents/studyRooms/$(roomId));
      allow create: if request.auth != null &&
                       ( (request.resource.data.userId == request.auth.uid) || // User's own message
                         (request.resource.data.userId == 'AI_ASSISTANT' && request.resource.data.userName == 'AI Helper') // AI message
                       );
      allow update: if request.auth != null &&
                       ( (resource.data.userId == request.auth.uid && request.resource.data.userId == request.auth.uid) || // User updates own message
                         (resource.data.userId == 'AI_ASSISTANT' && request.resource.data.userId == 'AI_ASSISTANT') // AI updates its own message (e.g. "Thinking...")
                       );
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid; // Only user can delete their own message
    }

    // Shared Note Links
    match /sharedNoteLinks/{linkId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.ownerUid == request.auth.uid;
      allow delete: if request.auth != null && resource.data.ownerUid == request.auth.uid;
    }
  }
}
