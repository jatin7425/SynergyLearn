
// This is an autogenerated file from running `firebase genkit:flow`.
'use server';

/**
 * @fileOverview AI tool to suggest learning milestones based on user-defined goals.
 *
 * - suggestLearningMilestones - A function that suggests learning milestones.
 * - SuggestLearningMilestonesInput - The input type for the suggestLearningMilestones function.
 * - SuggestLearningMilestonesOutput - The return type for the suggestLearningMilestones function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
// import { routeQueryToModel, type UserQueryInput } from './route-query-flow'; // Router flow is temporarily bypassed for admin config
import { db } from '@/lib/firebase'; // Import Firestore
import { doc, getDoc } from 'firebase/firestore'; // Import Firestore functions

const MODEL_CONFIG_PATH = 'adminConfig/modelSelection';
const DEFAULT_MODEL_ID = 'googleai/gemini-2.0-flash'; // Fallback model

const SuggestLearningMilestonesInputSchema = z.object({
  goal: z.string().describe('The overall learning goal of the user.'),
  currentSkills: z.string().describe('The current skills of the user.'),
  learningPreferences: z.string().describe('The learning preferences of the user.'),
});

export type SuggestLearningMilestonesInput = z.infer<typeof SuggestLearningMilestonesInputSchema>;

const SuggestLearningMilestonesOutputSchema = z.object({
  milestones: z.array(z.string()).describe('A list of suggested learning milestones.'),
  modelUsed: z.string().optional().describe('The model that was used to generate the milestones.'),
  routingReason: z.string().optional().describe('Reason for choosing the model (e.g., Admin configured, Fallback).'),
});

export type SuggestLearningMilestonesOutput = z.infer<typeof SuggestLearningMilestonesOutputSchema>;

export async function suggestLearningMilestones(input: SuggestLearningMilestonesInput): Promise<SuggestLearningMilestonesOutput> {
  return suggestLearningMilestonesFlow(input);
}

const suggestLearningMilestonesPrompt = ai.definePrompt({
  name: 'suggestLearningMilestonesPrompt',
  input: {schema: SuggestLearningMilestonesInputSchema},
  output: {schema: SuggestLearningMilestonesOutputSchema.omit({ modelUsed: true, routingReason: true })}, // Prompt's direct output schema
  prompt: `You are an AI learning assistant. Your goal is to help users achieve their learning goals by suggesting a list of milestones.

  Consider the user's current skills, learning preferences, and overall goal when suggesting milestones.

  Goal: {{{goal}}}
  Current Skills: {{{currentSkills}}}
  Learning Preferences: {{{learningPreferences}}}

  Suggest a list of milestones to achieve the goal. Ensure the output is an array of strings under the 'milestones' key.
  `,
});

const suggestLearningMilestonesFlow = ai.defineFlow(
  {
    name: 'suggestLearningMilestonesFlow',
    inputSchema: SuggestLearningMilestonesInputSchema,
    outputSchema: SuggestLearningMilestonesOutputSchema,
  },
  async (input) => {
    let selectedModelName = DEFAULT_MODEL_ID;
    let routingReason = `Fallback to default model: ${DEFAULT_MODEL_ID}`;

    try {
      const configDocRef = doc(db, MODEL_CONFIG_PATH);
      const docSnap = await getDoc(configDocRef);
      if (docSnap.exists() && docSnap.data()?.activeModelId) {
        selectedModelName = docSnap.data()?.activeModelId;
        routingReason = `Admin configured model: ${selectedModelName}`;
        console.log(`SuggestMilestones: Using admin configured model: ${selectedModelName}`);
      } else {
        console.log(`SuggestMilestones: No admin model config found at ${MODEL_CONFIG_PATH}. Using fallback: ${DEFAULT_MODEL_ID}`);
      }
    } catch (error) {
      console.error(`SuggestMilestones: Error fetching admin model config. Using fallback. Error: ${(error as Error).message}`);
      // selectedModelName and routingReason remain as default
    }
    
    // If the selected model is a Hugging Face model (heuristic: contains '/'), log a note.
    // Actual execution with HF models may require direct API calls.
    if (selectedModelName.includes('/') && !selectedModelName.startsWith('googleai/') && !selectedModelName.startsWith('ollama/')) {
      console.log(`SuggestMilestones: NOTE - Model '${selectedModelName}' appears to be a Hugging Face model. Direct Genkit ai.generate() may not work without a specific plugin. This flow will attempt to use it, but further integration for HF API might be needed.`);
      // For now, we still pass it to ai.generate. If a plugin is set up for this HF model type, it might work.
      // Otherwise, this is where custom fetch logic to HF Inference API would go.
    }
    
    const {output} = await suggestLearningMilestonesPrompt(input, { model: selectedModelName as any }); 
    
    if (!output) {
      return { 
        milestones: ["Failed to generate milestones. The selected model may not be available or compatible with Genkit's default prompt mechanism."], 
        modelUsed: selectedModelName, 
        routingReason: `${routingReason} - Generation failed.`
      };
    }
    
    return { ...output, modelUsed: selectedModelName, routingReason };
  }
);

